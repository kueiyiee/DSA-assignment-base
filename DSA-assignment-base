Individual Assignment: Algorithms Using Arrays

1. Algorithm to Find the Smallest Number in an Array (Using Pointers in C++)
cpp
Copy
Edit
#include <iostream>
using namespace std;

int findSmallest(int* arr, int size) {
    int smallest = *arr;  // Assume first element is smallest
    for (int i = 1; i < size; i++) {
        if (*(arr + i) < smallest) {
            smallest = *(arr + i);
        }
    }
    return smallest;
}
Explanation:

We assume the first element is the smallest.

We traverse the array using pointers.

We update the smallest variable whenever we find a smaller element.

Time Complexity: O(n)

Space Complexity: O(1)

2. Algorithm to Find the Second and Third Largest Elements in an Array (Using Pointers in C++)
cpp
Copy
Edit
#include <iostream>
using namespace std;

void findSecondAndThirdLargest(int* arr, int size, int& second, int& third) {
    if (size < 3) {
        cout << "Array must have at least 3 elements." << endl;
        return;
    }

    int first = -9999999;
    second = -9999999;
    third = -9999999;

    for (int i = 0; i < size; i++) {
        int current = *(arr + i);

        if (current > first) {
            third = second;
            second = first;
            first = current;
        } else if (current > second && current != first) {
            third = second;
            second = current;
        } else if (current > third && current != second && current != first) {
            third = current;
        }
    }
}
Explanation:

We use three variables: first, second, and third to track the top three largest values.

On each iteration, we compare and update them accordingly, ignoring duplicates.

This solution works in a single pass.

Time Complexity: O(n)

Space Complexity: O(1)

Example Usage:
cpp
Copy
Edit
int main() {
    int arr[] = {14, 3, 27, 8, 35, 10, 27};
    int size = sizeof(arr) / sizeof(arr[0]);

    int smallest = findSmallest(arr, size);
    cout << "Smallest Number: " << smallest << endl;

    int second, third;
    findSecondAndThirdLargest(arr, size, second, third);
    cout << "Second Largest: " << second << endl;
    cout << "Third Largest: " << third << endl;

    return 0;
}
Summary of Findings:
The smallest number can be found efficiently by linear scan with pointers.

Finding second and third largest elements requires careful comparison, avoiding duplicates.

All implementations use pointer arithmetic and are optimized with O(n) time and O(1) space.

This approach demonstrates pointer proficiency and efficient algorithm design.