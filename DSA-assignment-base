Individual Assignment: Iterative and Recursive Approaches in Algorithms
1. What is Iterative and Recursive Approach in Algorithms?
Iterative Approach:
An iterative approach solves a problem by repeatedly executing a set of instructions using loops such as for, while, or do-while. It controls the flow of execution manually and updates variables explicitly until the desired condition is met.

Recursive Approach:
A recursive approach solves a problem by breaking it down into smaller sub-problems of the same type. The function calls itself within its definition and continues until it reaches a base case that stops the recursion. It requires both a base case and a recursive case.

Comparison:

Iterative solutions are usually more memory-efficient and faster because they donâ€™t use the system stack.

Recursive solutions are often easier to write and understand for problems that are naturally recursive, like divide and conquer algorithms.

Iteration uses loop constructs; recursion uses function calls.

Iteration has constant space complexity; recursion uses additional space due to the call stack.

2. Binary Search Implementation Using Iterative and Recursive Approaches
Note: Binary Search only works on a sorted array.

Iterative Binary Search Using Pointers in C++

cpp
Copy
Edit
int binarySearchIterative(int* arr, int size, int target) {
    int left = 0, right = size - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (*(arr + mid) == target)
            return mid;
        else if (*(arr + mid) < target)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return -1;
}
Recursive Binary Search Using Pointers in C++

cpp
Copy
Edit
int binarySearchRecursive(int* arr, int left, int right, int target) {
    if (left > right)
        return -1;

    int mid = left + (right - left) / 2;

    if (*(arr + mid) == target)
        return mid;
    else if (*(arr + mid) < target)
        return binarySearchRecursive(arr, mid + 1, right, target);
    else
        return binarySearchRecursive(arr, left, mid - 1, target);
}
3. Complexity Analysis
Time Complexity (Both Iterative and Recursive):

Best Case: O(1)

Average Case: O(log n)

Worst Case: O(log n)

Space Complexity:

Iterative Approach: O(1) (constant space)

Recursive Approach: O(log n) (due to recursive call stack)

4. Summary of Findings
Binary search is an efficient searching algorithm for sorted arrays. Both iterative and recursive implementations achieve the same time complexity of O(log n). However, the iterative approach uses constant memory, while the recursive approach uses additional memory on the call stack. The recursive method is often preferred for its simplicity and clarity, especially in academic contexts, but in real-world applications where performance and memory are critical, the iterative approach is more efficient.

